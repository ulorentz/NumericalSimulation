#ifndef _ISING1D_H_
#define _ISING1D_H_
#include <string>
#include <cmath>
#include <fstream>
#include <map>
#include <vector>
#include "random.h"             //Random

class Ising1D{
    public:
        //Default constructor: it needs, in the folder of the executable, the
        //following files:
        //  -"Primes" and "seed.in" in order to initialize the random generator
        //  -"input.dat" that is a file containing the simulation parameter. It
        //    will be read in the following way:
        //
        //  ReadInput >> temp;          //temperature
        //  ReadInput >> nspin;         //number of spins
        //  ReadInput >> J;             //value of J in potential
        //  ReadInput >> h;             //external field
        //  ReadInput >> metro;         //1 use metropolis, 0 use gibbs
        //  ReadInput >> nblk;          //number of blocks
        //  ReadInput >> nstep;         //number of steps in simulation
        //
        // -"previous_configuration" should be the filename of a file containing 
        //   a configuration valid for the ising model defined in "input.dat". 
        //   Usually, `previous_configuration` is a file generated by a previous 
        //   run, i.e: "config.final".
        //   If no "previous_configuration" filename is provided, the default 
        //   behaviour is to act as a first simulation: spins will be set 
        //   randomly and output files (energy, ecc..) will be ovewrited. 
        //   If a previous configuration is provided, the output file (energy,
        //   ecc...) will be appended.
        Ising1D(std::string previous_configuration="");

        //Just run the simulation of the ising model. 
        void Run();

        ~Ising1D();

    private:
        //random class, defined in random.h
        Random rnd;

        //simulation data
        //map key will be set in constructor as:
        // "energy"
        // "capacity"
        // "magnetization"
        // "susceptibility"
        std::vector<std::string> keys;                  //keys for maps
        std::map<std::string, double> walker;
        std::map<std::string, double> block_average;
        std::map<std::string, double> global_average, global_average2;

        double blk_norm, accepted, attempted;
        double stima_u, stima_c, stima_m, stima_x, stima_g;
        double err_u, err_c, err_m, err_x, err_g;

   
        //spins
        std::vector<short> s;        
                                    
                                   
        // thermodynamical state
        unsigned int nspin;
        double beta,temp,J,h;

        // simulation
        int nstep, nblk, metro;
        //output files
        std::ofstream Ene, Heat, Mag, Chi;
 


        //private methods
        void GetInputFromFile();
        void Measure();
        void Reset(unsigned int iblk);
        void Accumulate();
        void BlockAverages(unsigned int);
        void ConfFinal();
        
        //move functions  
        void (Ising1D::*Move)();  //pointer to be set to metropolis or gibbs
        void MetropolisMove();
        void GibbsMove();

        //private inline methods
        double Boltzmann(int, int) const;
        int Pbc(int) const;
        double Error(double,double,int) const;
};



/***** Inline methods *****/

inline int Ising1D::Pbc(int i) const
//Algorithm for periodic boundary conditions
{
    if(i >= (int)nspin) i = i - nspin;
    else if(i < 0) i = i + nspin;
    return i;
}

inline double Ising1D::Error(double sum, double sum2, int iblk) const
{
    return std::sqrt((sum2/(double)iblk-pow(sum/(double)iblk,2))/(double)iblk);
}

inline double Ising1D::Boltzmann(int sm, int ip) const
{
  double ene = -J * sm * ( s[Pbc(ip-1)] + s[Pbc(ip+1)] ) - h * sm;
  return ene;
}

#endif //_ISING1D_H_
